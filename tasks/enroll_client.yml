- name: debug
  debug:
    msg: "Enroll Client: {{ ansible_distribution}}"
- name: Disable DNS processing in NetworkManager
  copy:
    dest: /etc/NetworkManager/conf.d/90-dns-none.conf
    content: |
      [main]
      dns=none
    owner: root
    group: root
    mode: '0644'
  register: networmanager
  when: ansible_distribution != "Ubuntu" and not ipaserver_setup_default_resolv and ipaserver_setup_disable_default_dns


- name: "[DNS] - configure addresses"
  set_fact:
    adresses: "{{ ipaserver_setup_nameserver_resolv }},{{freeipa_srv_nameserver_address}}"
  when: freeipa_srv_nameserver_address != "127.0.0.1"

- name: "[DNS] - Find files with 'ipa' in name"
  set_fact:
    adresses: "{{ ipaserver_setup_nameserver_resolv }}"
  when: freeipa_srv_nameserver_address == "127.0.0.1"

- name: "[DNS] - Override default conf"
  copy:
    dest: /etc/NetworkManager/conf.d/90-dns-none.conf
    content: |
      [main]
      dns=default

      [global-dns]
      searches={{ipaserver_domain}}

      [global-dns-domain-*]
      servers={{ adresses }}
    owner: root
    group: root
    mode: '0644'
  when: ansible_distribution != "Ubuntu" and ipaserver_setup_default_resolv


- name: "[DNS] - Reload NetworkManager service"
  systemd:
    name: NetworkManager
    state: reloaded
  when: ansible_distribution != "Ubuntu" and ipaserver_setup_default_resolv

- name: debug networmanager
  debug:
    msg: "Should restart Network Manager {{networmanager}}"

- name: "[Enroll Client] - Restart NetworkManager"
  service:
    name: NetworkManager
    state: restarted
  when: networmanager is defined and networmanager.changed


- name: "[Enroll Client] - Check CLIENT not setup"
  shell: >
    echo '{{ipaadmin_password}}' | kinit admin@{{ipaserver_realm}} ; ipa host-find "{{inventory_hostname }} "
  register: client_exist
  delegate_to: "{{ groups['ipaserver'] | first }}"
  ignore_errors: True

- name:
  debug:
    msg: "IPA Client is setup: {{ client_exist.rc }}"

- name: "[Enroll Client] - Execute CLIENT setup command"
  shell: >
    echo '{{ipaadmin_password}}' | kinit admin@{{ipaserver_realm}} ;
    ipa-client-install -U \
    --server {{ groups['ipaserver'] | first}} \
    --realm '{{ipaserver_realm}}' -p admin@{{ipaserver_realm}} \
    -w '{{ipaadmin_password}}' \
    --hostname '{{ inventory_hostname }}' \
    --domain '{{ipaserver_domain}}' \
    --mkhomedir \
    {% if ipaserver_setup_dns is defined and ipaserver_setup_dns %} --enable-dns-updates {% endif %}  --force-join 
  when: client_exist.rc != 0

- name: "[Enroll Client] - Get CLIENT shortname"
  set_fact:
     shortname: "{{ inventory_hostname | regex_search('([a-z0-9]+)')}}"
     ipadress: "{{hostvars[inventory_hostname]['ansible_ssh_host']}}"

- name: "[Enroll Client] - Check DNS record exists for host (CLIENT)"
  shell: >
    echo '{{ipaadmin_password}}' | kinit admin@{{ipaserver_realm}} ; ipa dnsrecord-find {{ipaserver_domain}} {{shortname}}
  when: ipaserver_setup_dns is defined and ipaserver_setup_dns and hostvars[inventory_hostname]['ansible_ssh_host'] is defined
  register: dns_record_exist
  ignore_errors: True

- name: "[Enroll Client] - Add DNS record for host (CLIENT)"
  shell: >
    echo '{{ipaadmin_password}}' | kinit admin@{{ipaserver_realm}} ; ipa dnsrecord-add {{ipaserver_domain}} {{shortname}}  --a-ip-address {{ipadress}} --a-create-reverse
  when: ipaserver_setup_dns is defined and ipaserver_setup_dns and hostvars[inventory_hostname]['ansible_ssh_host'] is defined and dns_record_exist.rc == 1

- name: "[Enroll Client] - Check DNS record exists for host (CLIENT)"
  shell: >
    echo '{{ipaadmin_password}}' | kinit admin@{{ipaserver_realm}} ; ipa dnsrecord-find {{ipaserver_domain}} {{shortname}}
  when: ipaserver_setup_dns is defined and ipaserver_setup_dns and hostvars[inventory_hostname]['ansible_ssh_host'] is defined
